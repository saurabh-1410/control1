[[inputs.file]]
data_format = "value"
data_type = "string"
files = ["./metrics/puppetdb/**json"]
[inputs.file.tags]
type = 'puppetdb'

[[processors.starlark]]
namepass = ["file"]
source = '''
load("json.star", "json")
load("time.star", "time")

def apply(metric):
  d = json.decode(metric.fields['value'])
  server = d['servers'].keys()[0]
  timestamp = d['timestamp']
  date = time.parse_time(d['timestamp'], location="UTC").unix_nano
  metrics = []

  # The format of these mbeans may be different on older versions
  mq_keys = ['mq_replace_facts', 'mq_store_report', 'mq_replace_catalog', 'mq_deactivate_node', 'mq_replace_catalog_inputs']

  skip_keys = ['error', 'error_count', 'api-query-start', 'api-query-duration', 'puppetdb-status', 'status-service', 'jetty-queuedthreadpool', 'ha_last-sync-succeeded'] 
  skip_fields = ['RateUnit', 'DurationUnit', 'state']

  # Skip this file if the 'puppetdb-status' entry is not present
  if 'puppetdb-status' not in d['servers'][server]['puppetdb'].keys():
     return

  # The format we expect for the mbean entries is a dict under the 'puppetdb' dict of the form:
  #   {
  #     "mbean-name": {
  #       "key_1": "value_1",
  #       "key_2": "value_2"
  #     }
  #   }

  # If we iterate two levels deep and find another dict, we skip it

  for k,v in d['servers'][server]['puppetdb'].items():
    if k not in skip_keys:
      if v == None:
        continue
      m = Metric("puppetdb")
      m.time = date
      m.tags['url'] = server

      for i,j in v.items():
        if j == None or i in skip_fields or type(j) == 'dict':
          continue
        m.tags['mbean'] = k.replace('ha_', '').replace('storage_', '').replace('_', '.')
        m.fields[i] = float(j) if i in ['Min', 'Max'] else j

      metrics.append(m)

  # These mbeans may be different in different versions, so a special case for them
  for mq_key in mq_keys:
    if mq_key in d['servers'][server]['puppetdb'].keys() and d['servers'][server]['puppetdb'][mq_key] != None:
       for k,v in d['servers'][server]['puppetdb'][mq_key].items():
         if k not in skip_keys:
           if v == None:
             continue
           m = Metric("puppetdb")
           m.time = date
           m.tags['url'] = server

           for i,j in v.items():
             if j == None or i in skip_fields:
               continue
             m.tags['mbean'] = k.replace('ha_', '').replace('storage_', '').replace('_', '.')
             m.fields[i] = float(j) if i in ['Min', 'Max'] else j

           metrics.append(m)

  if 'queue_depth' in d['servers'][server]['puppetdb']['puppetdb-status']['status']:
    queue_depth = d['servers'][server]['puppetdb']['puppetdb-status']['status']['queue_depth']
    m = Metric("puppetdb")
    m.time = date
    m.tags['url'] = server
    m.fields['queue_depth'] = queue_depth
    metrics.append(m)

  if 'jetty-queuedthreadpool' in d['servers'][server]['puppetdb'].keys():
     for k,v in d['servers'][server]['puppetdb']['jetty-queuedthreadpool'].items():
       if k not in skip_keys:
         if v == None:
           continue
         m = Metric("puppetdb")
         m.time = date
         m.tags['url'] = server

         for i,j in v.items():
           if j == None or i in skip_fields:
             continue
           m.tags['mbean'] = 'queuedthreadpool'
           m.fields[i] = j

         metrics.append(m)

  if 'jvm-metrics' in d['servers'][server]['puppetdb']['status-service']['status']['experimental']:
    subdict = d['servers'][server]['puppetdb']['status-service']['status']['experimental']['jvm-metrics']

    metric = Metric("puppetdb")
    metric.time = date
    metric.tags['url'] = server

    recurse_dict(subdict, None, metric)
    metrics.append(metric)
    return metrics

def recurse_dict(dict, tags, metric):
  for k,v in dict.items():
    if type(v) == 'dict':
      recurse_dict(v, k if tags == None else tags + "_{0}".format(k), metric)
    else:
      field = tags + "_" + k if tags else k
      metric.fields[field.replace(' ', '_')] = v

'''
[processors.starlark.tagpass]
type = ['puppetdb']
