[[inputs.file]]
data_format = "value"
data_type = "string"
files = ["./metrics/orchestrator/**json"]
[inputs.file.tags]
type = 'orchestrator'

[[processors.starlark]]
namepass = ["file"]
source = '''
load("json.star", "json")
load("time.star", "time")

def apply(metric):
  d = json.decode(metric.fields['value'])
  server = d['servers'].keys()[0]
  timestamp = d['timestamp']
  date = time.parse_time(d['timestamp'], location="UTC").unix_nano
  metrics = []

  if 'status-service' not in d['servers'][server]['orchestrator']:
    return

  if 'jvm-metrics' in d['servers'][server]['orchestrator']['status-service']['status']['experimental']:
    subdict = d['servers'][server]['orchestrator']['status-service']['status']['experimental']['jvm-metrics']

    metric = Metric("orchestrator")
    metric.time = date
    metric.tags['url'] = server

    recurse_dict(subdict, None, metric, [])
    metrics.append(metric)

  if 'file-sync-client-service' in d['servers'][server]['orchestrator']:
    subdict = d['servers'][server]['orchestrator']['file-sync-client-service']['status']['experimental']['metrics']
    metric = Metric("orchestrator")
    metric.time = date
    metric.tags['url'] = server
    recurse_dict(subdict, 'file-sync-client-service_status_experimental_metrics', metric, [])
    metrics.append(metric)

  if 'metrics' in d['servers'][server]['orchestrator']['broker-service']['status']:
    subdict = d['servers'][server]['orchestrator']['broker-service']['status']['metrics']
    metric = Metric("orchestrator")
    metric.time = date
    metric.tags['url'] = server
    recurse_dict(subdict, None, metric, [])
    metrics.append(metric)

  if 'sorted-routes' in d['servers'][server]['orchestrator']['orchestrator-service']['status']['metrics']['routes']:
    m = d['servers'][server]['orchestrator']['orchestrator-service']['status']['metrics']['routes']['sorted-routes']

    route_metrics = iterate_metric_array(m, 'route-id', ['count', 'mean', 'aggregate'])

    for metric in route_metrics:
      metric.time = date
      metric.tags['url'] = server
      metrics.append(metric)

  return metrics

def recurse_dict(dict, tags, metric, skip_fields):
  for k,v in dict.items():
    if k in skip_fields:
      continue
    if type(v) == 'dict':
      recurse_dict(v, k if tags == None else tags + "_{0}".format(k), metric, skip_fields)
    else:
      field = tags + "_" + k if tags else k
      metric.fields[field.replace(' ', '_')] = v

def iterate_metric_array(metric_array, tag_field, fields):
  local_metrics = []

  for d in metric_array:
    metric = Metric("orchestrator")
    metric.tags[tag_field] = d[tag_field]

    for field in fields:
      metric.fields[field] = d[field]

    local_metrics.append(metric)

  return local_metrics

'''
[processors.starlark.tagpass]
type = ['orchestrator']
