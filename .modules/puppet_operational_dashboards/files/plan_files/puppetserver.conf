[[inputs.file]]
data_format = "value"
data_type = "string"
files = ["./metrics/puppetserver/**json"]
[inputs.file.tags]
type = 'puppetserver'

[[processors.starlark]]
namepass = ["file"]
source = '''
load("json.star", "json")
load("time.star", "time")

def apply(metric):
  d = json.decode(metric.fields['value'])
  server = d['servers'].keys()[0]
  timestamp = d['timestamp']
  date = time.parse_time(d['timestamp'], location="UTC").unix_nano
  metrics = []

  if 'status-service' not in d['servers'][server]['puppetserver']:
    return

  if 'jvm-metrics' in d['servers'][server]['puppetserver']['status-service']['status']['experimental']:
    subdict = d['servers'][server]['puppetserver']['status-service']['status']['experimental']['jvm-metrics']

    metric = Metric("puppetserver")
    metric.time = date
    metric.tags['url'] = server

    recurse_dict(subdict, None, metric, [])
    metrics.append(metric)

  if 'file-sync-client-service' in d['servers'][server]['puppetserver']:
    subdict = d['servers'][server]['puppetserver']['file-sync-client-service']['status']['experimental']['metrics']

    metric = Metric("puppetserver")
    metric.time = date
    metric.tags['url'] = server

    recurse_dict(subdict, 'file-sync-client-service_status_experimental_metrics', metric, [])
    metrics.append(metric)

  if 'http-metrics' in d['servers'][server]['puppetserver']['server']['status']['experimental']:
    m = d['servers'][server]['puppetserver']['server']['status']['experimental']['http-metrics']

    http_metrics = iterate_metric_array(m, 'route-id', ['count', 'mean', 'aggregate'])

    for metric in http_metrics:
      metric.time = date
      metric.tags['url'] = server
      metrics.append(metric)

  if 'http-client-metrics' in d['servers'][server]['puppetserver']['server']['status']['experimental']:
    m = d['servers'][server]['puppetserver']['server']['status']['experimental']['http-client-metrics']

    http_client_metrics = iterate_metric_array(m, 'metric-name', ['count', 'mean', 'aggregate'])

    for metric in http_client_metrics:
      metric.time = date
      metric.tags['url'] = server
      metrics.append(metric)

  if 'experimental' in d['servers'][server]['puppetserver']['puppet-profiler']['status'] and 'function-metrics' in d['servers'][server]['puppetserver']['puppet-profiler']['status']['experimental']:
    m = d['servers'][server]['puppetserver']['puppet-profiler']['status']['experimental']['function-metrics']

    function_metrics = iterate_metric_array(m, 'function', ['count', 'mean', 'aggregate'])

    for metric in function_metrics:
      metric.time = date
      metric.tags['url'] = server
      metrics.append(metric)

  if 'experimental' in d['servers'][server]['puppetserver']['puppet-profiler']['status'] and 'resource-metrics' in d['servers'][server]['puppetserver']['puppet-profiler']['status']['experimental']:
    m = d['servers'][server]['puppetserver']['puppet-profiler']['status']['experimental']['resource-metrics']

    resource_metrics = iterate_metric_array(m, 'resource', ['count', 'mean', 'aggregate'])

    for metric in resource_metrics:
      metric.time = date
      metric.tags['url'] = server
      metrics.append(metric)

  if 'experimental' in d['servers'][server]['puppetserver']['puppet-profiler']['status'] and 'catalog-metrics' in d['servers'][server]['puppetserver']['puppet-profiler']['status']['experimental']:
    m = d['servers'][server]['puppetserver']['puppet-profiler']['status']['experimental']['catalog-metrics']

    catalog_metrics = iterate_metric_array(m, 'metric', ['count', 'mean', 'aggregate'])

    for metric in catalog_metrics:
      metric.time = date
      metric.tags['url'] = server
      metrics.append(metric)

  if 'experimental' in d['servers'][server]['puppetserver']['puppet-profiler']['status'] and 'puppetdb-metrics' in d['servers'][server]['puppetserver']['puppet-profiler']['status']['experimental']:
    m = d['servers'][server]['puppetserver']['puppet-profiler']['status']['experimental']['puppetdb-metrics']

    puppetdb_metrics = iterate_metric_array(m, 'metric', ['count', 'mean', 'aggregate'])

    for metric in puppetdb_metrics:
      metric.time = date
      metric.tags['url'] = server
      metrics.append(metric)

  # The file sync storage fields are special because they are "additional metrics" in the collector
  # Here we use the field names returned by the /metrics/v2 api
  if 'file-sync-storage-commit-timer' in d['servers'][server]['puppetserver']:
    metric = Metric("puppetserver")
    metric.time = date
    metric.tags['url'] = server

    val = d['servers'][server]['puppetserver']['file-sync-storage-commit-timer']
    if val:
      metric.fields['file-sync-storage-service_status_experimental_metrics_average-commit-time'] = val[0].values()["Mean"]
      metric.fields['file-sync-storage-service_status_experimental_metrics_num-commits'] = val.values()[0]["Count"]

    val = d['servers'][server]['puppetserver']['file-sync-storage-pre-commit-hook-timer']
    if val:
      metric.fields['file-sync-storage-service_status_experimental_metrics_average-pre-commit-hook-time'] = val.values()[0]["Mean"]
      metric.fields['file-sync-storage-service_status_experimental_metrics_num-pre-commit-hook-ops'] = val.values()[0]["Count"]

    val = d['servers'][server]['puppetserver']['file-sync-storage-commit-add-rm-timer']
    if val:
      metric.fields['file-sync-storage-service_status_experimental_metrics_average-commit-add-rm-time'] = val.values()[0]["Mean"]
      metric.fields['file-sync-storage-service_status_experimental_metrics_num-commit-add-rm-ops'] = val.values()[0]["Count"]

    metrics.append(metric)

  # Why does this one have to be different
  if 'jruby-metrics' in d['servers'][server]['puppetserver']:
    m = d['servers'][server]['puppetserver']['jruby-metrics']['status']['experimental']['metrics']
    metric = Metric("puppetserver")
    metric.time = date
    metric.tags['url'] = server

    skip_fields = ['borrow-timers', 'borrowed-instances', 'requested-instances']

    recurse_dict(m, None, metric, skip_fields)
    metrics.append(metric)

    metric = Metric("puppetserver")
    metric.time = date
    metric.tags['url'] = server

    for b in m['borrow-timers']:
      for k,v in m['borrow-timers'][b].items():
        metric.fields["borrow-timers_{0}_{1}".format(b, k)] = v

    metrics.append(metric)
    return metrics

def recurse_dict(dict, tags, metric, skip_fields):
  for k,v in dict.items():
    if k in skip_fields:
      continue
    if type(v) == 'dict':
      recurse_dict(v, k if tags == None else tags + "_{0}".format(k), metric, skip_fields)
    else:
      field = tags + "_" + k if tags else k
      metric.fields[field.replace(' ', '_')] = v

def iterate_metric_array(metric_array, tag_field, fields):
  local_metrics = []

  for d in metric_array:
    metric = Metric("puppetserver")
    metric.tags[tag_field] = d[tag_field]

    for field in fields:
      metric.fields[field] = d[field]

    local_metrics.append(metric)

  return local_metrics

'''
[processors.starlark.tagpass]
type = ['puppetserver']
