[[inputs.file]]
data_format = "value"
data_type = "string"
files = ["./metrics/postgres/**json"]
[inputs.file.tags]
type = 'postgresql'

[[processors.starlark]]
namepass = ["file"]
source = '''
load("json.star", "json")
load("time.star", "time")

def apply(metric):
  d = json.decode(metric.fields['value'])
  server = d['servers'].keys()[0]
  timestamp = d['timestamp']
  date = time.parse_time(d['timestamp'], location="UTC").unix_nano
  metrics = []
  skip_fields = ['bloat_percent', 'bloat_size']

  if 'error' in d['servers'][server]['postgres'].keys() and len(d['servers'][server]['postgres']['error']) > 0:
     return

  for k, v in d['servers'][server]['postgres']['connections'].items():
    m = Metric("postgresql")
    m.tags['server'] = server
    m.time = date
    m.fields[k] = v
    m.time = date
    metrics.append(m)

  for k, v in d['servers'][server]['postgres']['checkpoints'].items():
    m = Metric("postgresql")
    m.tags['server'] = server
    m.time = date
    m.fields[k] = v
    m.time = date
    metrics.append(m)

  if 'replication_slots' in d['servers'][server]['postgres'].keys():
    subdict = d['servers'][server]['postgres']['replication_slots']
    for k in subdict.keys():
      m = Metric("postgresql")
      m.tags['server'] = server
      m.tags['slot'] = k
      m.time = date
      for i,j in subdict[k].items():
        if i == 'active' or j == None:
          continue
        m.fields[i] = j

      metrics.append(m)

  subdict = d['servers'][server]['postgres']['databases']
  for db in subdict.keys():
    for k,v in subdict[db]['database_stats'].items():
      if v == None or k in skip_fields:
        continue

      m = Metric("postgresql")
      m.tags['db'] = db
      m.tags['server'] = server
      m.time = date

      field = 'total' if k == 'size_bytes' else k
      m.fields[field] = v
      m.fields[k] = v

      metrics.append(m)

    if 'table_stats' in subdict[db].keys():
       for table in subdict[db]['table_stats'].keys():
         table_name = table.split('.')[-1]

         m = Metric("postgresql")
         m.tags['db'] = db
         m.tags['table_name'] = table_name
         m.tags['table'] = table_name
         m.tags['server'] = server
         m.time = date
         for k,v in subdict[db]['table_stats'][table].items():
           if v == None or k in skip_fields:
             continue

           field = 'table' if k == 'size_bytes' else k
           m.fields[field] = v
         metrics.append(m)

    if 'index_stats' in subdict[db].keys():
       # Metrics collector outputs these per index, so we sum them per table
       index_tables = {}
       for table in subdict[db]['index_stats'].keys():
         table_name = table.split('.')[-1]

         for k,v in subdict[db]['index_stats'][table].items():
           if v == None or k in skip_fields:
             continue

           field = 'index' if k == 'size_bytes' else k

           if table_name not in index_tables:
              index_tables[table_name] = {}

           if field in index_tables[table_name]:
             index_tables[table_name][field] += v
           else:
             index_tables[table_name][field] = v

       for t in index_tables:
         m = Metric("postgresql")
         m.tags['db'] = db
         m.tags['table'] = t
         m.tags['table_name'] = t
         m.tags['server'] = server
         m.time = date

         for k,v in index_tables[t].items():
            m.fields[k] = v

         metrics.append(m)

    if 'toast_stats' in subdict[db].keys():
       for table in subdict[db]['toast_stats'].keys():
         table_name = table.split('.')[-1]

         m = Metric("postgresql")
         m.tags['db'] = db
         m.tags['table'] = table_name
         m.tags['table_name'] = table_name
         m.tags['server'] = server
         m.time = date
         for k,v in subdict[db]['toast_stats'][table].items():
           # The only field we care about here is the size of the toast table
           # Other stats like toast blocks read are present in table_stats
           if v == None or k != 'size_bytes':
             continue

           m.fields['toast'] = v
         metrics.append(m)
  return metrics
'''
[processors.starlark.tagpass]
type = ['postgresql']
